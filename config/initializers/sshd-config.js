'use strict';

var fs = require('fs');
var async = require('async');

module.exports = function(compound) {
    compound.Config = Config;
};

function Config() {
    this.settings = {};
};

Config.prototype.load = function load(path, cb) {
    var config = this;
    config.path = path;
    fs.readFile(path, function(err, content) {
        if (err) {
            if ('ENOENT' === err.code) {
                return cb();
            }
            return cb(err);
        }
        config.settings = Config.parse(content.toString());
        cb();
    });
};

Config.prototype.save = function save(cb) {
    var settings = this.settings;
    fs.writeFile(this.path, Object.keys(settings).reduce(function(previous, key) {
        if ('object' === typeof settings[key]) {
            return previous += settings[key].reduce(function(previous, value) {
                return previous += key + ' ' + value + '\n';
            }, '');
        } else {
            return previous += key + ' ' + settings[key] + '\n';
        }
    }, '# Auto generated by osmosis\n'), function(err) {
        cb(err);
    });
};

Config.prototype.get = function get(key) {
    return this.settings[key];
};

Config.prototype.set = function set(key, value) {
    switch (typeof this.settings[key]) {
        case 'object':
        this.settings[key].push(value);
        break;
        case 'string':
        this.settings[key] = [this.settings[key], value];
        break;
        default:
        this.settings[key] = value;
        break;
    }
};

Config.parse = function parse(data) {
    return data.split('\n').filter(function(line) {
        line = line.trim();
        if (!line || line.charAt(0) === '#') {
            return false;
        }
        return true;
    }).reduce(function(previous, line) {
        line = line.split(/\s+/);
        previous[line[0]] = line.slice(1).join(' ');
        return previous;
    }, {});
};

